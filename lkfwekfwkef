from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    CallbackContext,
    ConversationHandler
)

from database import create_user, get_user_profile, disable_user_profile, add_service
import logging
from database import create_tables
TOKEN = "5741958407:AAFlowMVLrQM2brVpCMDx9yRNs27sMy3XsE"

create_tables()



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

logger.info("Bot started")

TITLE, DESCRIPTION, CITY, CATEGORY, CONTACT = range(5)

def create_service_start(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    return TITLE

def create_service_title(update: Update, context: CallbackContext):
    title = update.message.text
    context.user_data["title"] = title
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    return DESCRIPTION

def create_service_description(update: Update, context: CallbackContext):
    description = update.message.text
    context.user_data["description"] = description
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —É—Å–ª—É–≥–∏:")
    return CITY

def create_service_city(update: Update, context: CallbackContext):
    city = update.message.text
    context.user_data["city"] = city
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:", reply_markup=categories_keyboard())
    return CATEGORY

def create_service_category(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    category = query.data.split('_')[-1]
    context.user_data["category"] = category
    query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    return CONTACT

def create_service_contact(update: Update, context: CallbackContext):
    contact = update.message.text
    context.user_data["contact"] = contact

    # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏–º –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_id = update.message.from_user.id
    title = context.user_data["title"]
    description = context.user_data["description"]
    city = context.user_data["city"]
    category = context.user_data["category"]

    # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_service(user_id, title, description, city, category, contact)

    update.message.reply_text("–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    return ConversationHandler.END

def create_service_cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

create_service_handler = ConversationHandler(
    entry_points=[CommandHandler("create_service", create_service_start)],
    states={
        TITLE: [MessageHandler(filters.Text, create_service_title)],
        DESCRIPTION: [MessageHandler(filters.Text, create_service_description)],
        CITY: [MessageHandler(filters.Text, create_service_city)],
        CATEGORY: [CallbackQueryHandler(create_service_category, pattern="^create_service_category")],
        CONTACT: [MessageHandler(filters.Text, create_service_contact)],
    },
    fallbacks=[CommandHandler("cancel", create_service_cancel)],
)


def my_profile(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    profile = get_user_profile(user_id)

    if profile:
        profile_info = f"–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: {profile[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {profile[3]}\n–ì–æ—Ä–æ–¥: {profile[4]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {profile[5]}\n–ö–æ–Ω—Ç–∞–∫—Ç: {profile[6]}\n"

        keyboard = [
            [
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="my_profile_edit"),
                InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="my_profile_disable"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(profile_info, reply_markup=reply_markup)
    else:
        update.message.reply_text("–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —É—Å–ª—É–≥—É. –°–æ–∑–¥–∞–π—Ç–µ —É—Å–ª—É–≥—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_service.")

def handle_my_profile(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    data = query.data.split('_')
    action = data[1]

    if action == "edit":
        # –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        pass
    elif action == "disable":
        user_id = query.from_user.id
        # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        disable_user_profile(user_id)
        query.edit_message_text("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")



def about_bot(update: Update, context: CallbackContext):
    about_text = """
–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —É—Å–ª—É–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≥–æ—Ä–æ–¥–∞–º, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/search_services - –ü–æ–∏—Å–∫ —É—Å–ª—É–≥
/create_service - –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥
/my_profile - –ú–æ—è –∞–Ω–∫–µ—Ç–∞-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
"""
    update.effective_message.reply_text(about_text)






def start(update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —É—Å–ª—É–≥", callback_data='search_services'),
            InlineKeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —É—Å–ª—É–≥—É", callback_data='create_service')
        ],
        [
            InlineKeyboardButton("üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data='my_profile'),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about_bot')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.effective_message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback_data –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

def get_services(category: str, city: str):
    conn = sqlite3.connect('services_bot.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM services WHERE category = ? AND city = ?", (category, city))
    services = cursor.fetchall()
    cursor.close()
    conn.close()
    return services

def search_services(update: Update, context: CallbackContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≥–æ—Ä–æ–¥–∞, –ø–æ–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    category = "—Ä–µ–º–æ–Ω—Ç"
    city = "–ú–æ—Å–∫–≤–∞"

    services = get_services(category, city)
    response = ""

    for service in services:
        response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {service[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {service[3]}\n–ì–æ—Ä–æ–¥: {service[4]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service[5]}\n–ö–æ–Ω—Ç–∞–∫—Ç: {service[6]}\n\n"

    update.message.reply_text(response if response else "–ù–µ—Ç —É—Å–ª—É–≥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")



def categories_keyboard():
    categories = [
        '—Ä–µ–º–æ–Ω—Ç',
        '–¥–æ—Å—Ç–∞–≤–∫–∞',
        '—á–∏—Å—Ç–∫–∞',
        '—ç–ª–µ–∫—Ç—Ä–∏–∫',
        '—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫',
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
        # –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    ]
    keyboard = [[InlineKeyboardButton(category, callback_data=f'search_services_category_{category}')] for category in categories]
    return InlineKeyboardMarkup(keyboard)

def search_services(update: Update, context: CallbackContext):
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=categories_keyboard())

def handle_search_services(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    data = query.data.split('_')
    action = data[1]

    if action == 'category':
        category = data[-1]
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        city = '–ú–æ—Å–∫–≤–∞'

        services = get_services(category, city)
        response = ""

        for service in services:
            response += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {service[2]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {service[3]}\n–ì–æ—Ä–æ–¥: {service[4]}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {service[5]}\n–ö–æ–Ω—Ç–∞–∫—Ç: {service[6]}\n\n"

        query.edit_message_text(response if response else "–ù–µ—Ç —É—Å–ª—É–≥, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")





def main():
    updater = Updater("YOUR_TELEGRAM_API_TOKEN", use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button))
    updater.start_polling()
    updater.idle()







if __name__ == "__main__":
    updater = Updater(TOKEN, use_context=True)

    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("search_services", search_services))
    dispatcher.add_handler(CommandHandler("about", about_bot))
    dispatcher.add_handler(CommandHandler("my_profile", my_profile))
    dispatcher.add_handler(CallbackQueryHandler(handle_my_profile, pattern="^my_profile"))
    dispatcher.add_handler(CallbackQueryHandler(handle_search_services, pattern='^search_services'))
    dispatcher.add_handler(create_service_handler)
    updater.start_polling()
    updater.idle()
