import telegram
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackContext,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackQueryHandler,
)

logging.basicConfig(level=logging.INFO)

CITIES = ["All Cities", "City A", "City B", "City C"]
SERVICES = ["Service 1", "Service 2", "Service 3"]

(
    SELECT_ACTION,
    REGISTER_PHONE,
    ADD_FEEDBACK,
    ADD_PORTFOLIO,
    ADD_BIO,
    SELECT_CITY,
    SELECT_SERVICE,
    VIEW_PROFILE,
    DELETE_PROFILE,
) = range(9)

def start(update: Update, context: CallbackContext):
    reply_markup = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("Register", callback_data="register")],
            [InlineKeyboardButton("Search Services", callback_data="search_services")],
            [InlineKeyboardButton("View Profile", callback_data="view_profile")],
            [InlineKeyboardButton("Delete Profile", callback_data="delete_profile")],
        ]
    )

    update.message.reply_text(
        "Welcome to the Service Finder Bot! Choose an action:",
        reply_markup=reply_markup,
    )

    return SELECT_ACTION

def select_action(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "register":
        query.edit_message_text("Let's fill out the questionnaire.")
        return register(update, context)
    elif query.data == "search_services":
        query.edit_message_text("Select a city:")
        return search_city(update, context)
    elif query.data == "view_profile":
        query.edit_message_text("Here is your profile information:")
        return view_profile(update, context)
    elif query.data == "delete_profile":
        query.edit_message_text("Are you sure you want to delete your profile?")
        return delete_profile(update, context)

def register(update: Update, context: CallbackContext):
    if "contact_info" in context.user_data:
        update.effective_message.reply_text("You are already registered!")
        return

    update.effective_message.reply_text(
        "Please share your phone number using the 'Share Contact' button.",
        reply_markup=ReplyKeyboardMarkup(
            [[telegram.KeyboardButton("Share Contact", request_contact=True)]],
            one_time_keyboard=True,
        ),
    )

    return REGISTER_PHONE

def check_contact(update: Update, context: CallbackContext):
    contact = update.message.contact

    if contact is not None:
        context.user_data["contact_info"] = contact.phone_number
        update.message.reply_text("Thanks for sharing your contact! Please provide your feedback information (Telegram username or phone number):")
        return ADD_FEEDBACK
    else:
        update.message.reply_text("Please share your contact using the 'Share Contact' button.")
        return REGISTER_PHONE

def add_feedback(update: Update, context: CallbackContext):
    feedback = update.message.text
    context.user_data["feedback"] = feedback

    update.message.reply_text("Please provide your portfolio URL/File (optional). If you don't have a portfolio, send /skip:")
    return ADD_PORTFOLIO

def add_portfolio(update: Update, context: CallbackContext):
    if update.message.text != "/skip":
        portfolio = update.message.text
        context.user_data["portfolio"] = portfolio

    update.message.reply_text("Please provide a biography (optional, up to 200 characters). If you don't have a biography, send /skip:")
    return ADD_BIO

def add_bio(update: Update, context: CallbackContext):
    if update.message.text != "/skip":
        bio = update.message.text
        context.user_data["bio"] = bio

    update.message.reply_text("Your service has been added!")
    return ConversationHandler.END

def search_city(update: Update, context: CallbackContext):
    city_keyboard = [
        [InlineKeyboardButton(city, callback_data=f"city:{city}") for city in CITIES]
    ]

    reply_markup = InlineKeyboardMarkup(city_keyboard)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="Select a city:",
        reply_markup=reply_markup,
    )

    return SELECT_CITY

def search_city_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    city = query.data.split(":")[1]
    context.user_data["search_city"] = city

    service_keyboard = [
        [InlineKeyboardButton(service, callback_data=f"service:{service}") for service in SERVICES]
    ]

    reply_markup = InlineKeyboardMarkup(service_keyboard)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="Select a service:",
        reply_markup=reply_markup,
    )

    return SELECT_SERVICE

def search_service_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    service = query.data.split(":")[1]
    context.user_data["search_service"] = service

    update.effective_message.reply_text("Here are the results:")

    return ConversationHandler.END

def view_profile(update: Update, context: CallbackContext):
    if "contact_info" not in context.user_data:
        update.effective_message.reply_text("You don't have a registered profile.")
        return register(update, context)

    profile_text = f"Phone number: {context.user_data['contact_info']}\n"
    profile_text += f"Feedback: {context.user_data['feedback']}\n"
    profile_text += f"Portfolio: {context.user_data.get('portfolio', 'N/A')}\n"
    profile_text += f"Bio: {context.user_data.get('bio', 'N/A')}"

    update.effective_message.reply_text(profile_text)

    return ConversationHandler.END

def delete_profile(update: Update, context: CallbackContext):
    if "contact_info" not in context.user_data:
        update.effective_message.reply_text("You don't have a registered profile.")
        return ConversationHandler.END

    context.user_data.clear()
    update.effective_message.reply_text("Your profile has been deleted.")

    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    user = update.message.from_user
    update.message.reply_text("Operation cancelled.")
    return ConversationHandler.END


def main():
    updater = Updater("5741958407:AAFlowMVLrQM2brVpCMDx9yRNs27sMy3XsE")

    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ACTION: [
                CallbackQueryHandler(select_action),
            ],
            REGISTER_PHONE: [
                MessageHandler(Filters.contact, check_contact),
            ],
            ADD_FEEDBACK: [
                MessageHandler(Filters.text, add_feedback),
            ],
            ADD_PORTFOLIO: [
                MessageHandler(Filters.text, add_portfolio),
            ],
            ADD_BIO: [
                MessageHandler(Filters.text, add_bio),
            ],
            SELECT_CITY: [
                CallbackQueryHandler(search_city_callback),
            ],
            SELECT_SERVICE: [
                CallbackQueryHandler(search_service_callback),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()
    dp.add_handler(CommandHandler("cancel", cancel))


if __name__ == "__main__":
    main()
