@dp.message_handler(lambda message: message.text == "Открыть профиль")
async def open_profile(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        await message.reply(f"Привет, {user[1]}! Ваша услуга: {user[2]}\nВаш город: {user[3]}\nВаша биография: {user[4]}\nПортфолио: {user[5]}", reply_markup=open_profile_keyboard())
    else:
        await message.reply("У вас пока нет профиля. Хотите создать объявление?", reply_markup=registration_keyboard())

@dp.message_handler(lambda message: message.text == "Редактировать профиль")
async def edit_profile(message: types.Message):
    await message.reply("Введите новое имя и фамилию (или оставьте старые, если не хотите их менять).", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


# Continue with the rest of the code from the previous message.
@dp.message_handler(lambda message: message.text not in ["Вернуться на главную"], state=3)
async def process_edit_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_name'] = message.text

    await message.reply("Введите новую услугу (или оставьте старую, если не хотите ее менять).", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.message_handler(lambda message: message.text not in ["Вернуться на главную"], state=4)
async def process_edit_service(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_service'] = message.text

    await message.reply("Выберите новый город (или оставьте старый, если не хотите его менять).", reply_markup=cities_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.callback_query_handler(lambda call: call.data.startswith('city_'), state=5)
async def process_edit_city(call: types.CallbackQuery, state: FSMContext):
    city_id = int(call.data[5:])
    city = cities[city_id]

    async with state.proxy() as data:
        data['new_city'] = city

    await call.message.reply("Введите новую биографию (или оставьте старую, если не хотите ее менять). Ограничение по символам от 20 до 160.", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.message_handler(lambda message: message.text not in ["Вернуться на главную"], state=6)
async def process_edit_bio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_bio'] = message.text

    await message.reply("Пожалуйста, предоставьте ссылку на ваше новое портфолио (если есть) или отправьте 'нет', если у вас нет портфолио. (или оставьте старое, если не хотите его менять).", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.message_handler(lambda message: message.text not in ["Вернуться на главную"], state=7)
async def process_edit_portfolio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_portfolio'] = message.text

        user_id = message.from_user.id
        new_name = data['new_name']
        new_service = data['new_service']
        new_city = data['new_city']
        new_bio = data['new_bio']
        new_portfolio = data['new_portfolio']

        update_user(user_id, new_name, new_service, new_city, new_bio, new_portfolio)

    await message.reply("Ваш профиль успешно обновлен! Вы можете просмотреть свой профиль или найти услуги других пользователей.", reply_markup=main_menu_keyboard())
    await state.finish()

# ... (остальная часть кода)
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
